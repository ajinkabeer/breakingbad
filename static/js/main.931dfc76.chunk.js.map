{"version":3,"sources":["api/client.ts","api/characters.ts","store/slices/characters.ts","components/Character/index.tsx","components/Loader/index.tsx","components/Filter/index.tsx","pages/Home.tsx","store/slices/character.ts","components/CharacterDetails/index.tsx","pages/Details.tsx","components/Header/index.tsx","App.tsx","store/index.ts","index.tsx"],"names":["apiClient","axios","create","baseURL","headers","fetchCharacterById","id","get","fetchCharactersThunk","createAsyncThunk","a","response","data","charactersSlice","createSlice","name","initialState","loading","error","initialResponse","reducers","filterResponse","state","action","payload","filterBy","sorted","slice","sort","b","Number","extraReducers","pending","type","rejected","fulfilled","charactersSelector","characters","actions","Character","img","portrayed","onClick","className","tabIndex","onKeyPress","role","data-testid","src","height","alt","Loader","Filter","value","onChange","htmlFor","defaultChecked","Home","dispatch","useDispatch","history","useHistory","useState","setFilterBy","useEffect","useSelector","onClickHandler","useCallback","push","onFilterChange","e","target","map","char_id","fetchCharacterByIdThunk","characterSlice","characterSelector","character","CharacterDetails","nickname","birthday","category","Details","match","params","slug","style","flex","replace","Header","App","exact","path","component","rootReducer","combineReducers","charactersReducer","characterReducer","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.931dfc76.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst host = 'https://breakingbadapi.com/api';\n\nconst apiClient = axios.create({\n  baseURL: host,\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n});\n\nexport default apiClient;\n","import apiClient from './client';\n\nconst fetchCharacters = () => apiClient.get('/characters');\n\nconst fetchCharacterById = ({ id }: { id: number }) =>\n  apiClient.get(`characters/${id}`);\n\nexport { fetchCharacters, fetchCharacterById };\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchCharacters } from '../../api/characters';\nimport { CharactersResponseType } from './types';\n\ntype CharactersType = {\n  loading: boolean;\n  error: boolean;\n  response: CharactersResponseType[] | null;\n  initialResponse: CharactersResponseType[] | null;\n};\n\nconst initialState: CharactersType = {\n  loading: false,\n  error: false,\n  response: null,\n  initialResponse: null,\n};\n\nexport const fetchCharactersThunk = createAsyncThunk(\n  'fetch/characters',\n  async () => {\n    try {\n      const response = await fetchCharacters();\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  }\n);\n\nconst charactersSlice = createSlice({\n  name: 'charactersSlice',\n  initialState,\n  reducers: {\n    filterResponse(state, action) {\n      const { filterBy } = action.payload;\n      switch (filterBy) {\n        case 'name': {\n          const sorted = state.response\n            ?.slice()\n            .sort((a, b) => (a.name < b.name ? -1 : Number(a.name > b.name)));\n          state.response = sorted;\n          break;\n        }\n        case 'none': {\n          state.response = state.initialResponse;\n          break;\n        }\n        default:\n          break;\n      }\n    },\n  },\n  extraReducers: {\n    [fetchCharactersThunk.pending.type]: (state, action) => {\n      state.loading = true;\n      state.error = action;\n    },\n    [fetchCharactersThunk.rejected.type]: (state, action) => {\n      state.loading = false;\n      state.error = action;\n    },\n    [fetchCharactersThunk.fulfilled.type]: (state, action) => {\n      state.loading = false;\n      state.response = action.payload;\n      state.initialResponse = action.payload;\n    },\n  },\n});\n\nexport const charactersSelector = (state: any) => state.characters;\nexport const { filterResponse } = charactersSlice.actions;\nexport default charactersSlice.reducer;\n","import './style.css';\n\ninterface Props {\n  id: number;\n  name: string;\n  img: string;\n  portrayed: string;\n  onClick: () => void;\n}\n\nconst Character = ({ id, name, img, portrayed, onClick }: Props) => (\n  <div className=\"card\">\n    <a\n      onClick={onClick}\n      tabIndex={id}\n      onKeyPress={onClick}\n      role=\"button\"\n      data-testid=\"click-character\"\n    >\n      <img src={img} height={400} alt={name} />\n      <div className=\"card-container\">\n        <div className=\"card-title-container\">\n          <h3>{name}</h3>\n          <p>{portrayed}</p>\n        </div>\n      </div>\n    </a>\n  </div>\n);\n\nexport default Character;\n","import './style.css';\n\nconst Loader = () => (\n  <div className=\"container\">\n    <p>Loading..</p>\n  </div>\n);\n\nexport default Loader;\n","import './style.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label htmlFor=\"filter-select\">\n    Filter by{' '}\n    <span>\n      {' '}\n      <select\n        id=\"filter-select\"\n        className=\"filter\"\n        onChange={onChange}\n        value={value}\n        defaultChecked={true}\n      >\n        <br />\n        <option value=\"none\">None</option>\n        <option value=\"name\">Name</option>\n      </select>\n    </span>\n  </label>\n);\n\nexport default Filter;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  fetchCharactersThunk,\n  charactersSelector,\n  filterResponse,\n} from '../store/slices/characters';\nimport Character from '../components/Character';\nimport Loader from '../components/Loader';\nimport '../css/home.css';\nimport Filter from '../components/Filter';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const [filterBy, setFilterBy] = useState<string>('none');\n\n  useEffect(() => {\n    dispatch(fetchCharactersThunk());\n  }, [dispatch]);\n\n  const { response, loading } = useSelector(charactersSelector);\n\n  useEffect(() => {\n    dispatch(filterResponse({ filterBy }));\n  }, [filterBy, dispatch]);\n\n  const onClickHandler = useCallback(\n    (id: number) => {\n      history.push(`/details/${id}`);\n    },\n    [history]\n  );\n\n  const onFilterChange = useCallback((e) => {\n    setFilterBy(e.target.value);\n  }, []);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <div>\n      <Filter onChange={onFilterChange} value={filterBy} />\n      <div className=\"grid-container\">\n        {response?.map(({ char_id: id, name, img, portrayed }) => (\n          <Character\n            key={id}\n            id={id}\n            name={name}\n            img={img}\n            portrayed={portrayed}\n            onClick={() => onClickHandler(id)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { fetchCharacterById } from '../../api/characters';\nimport { CharactersResponseType } from './types';\n\ntype CharacterType = {\n  loading: boolean;\n  error: boolean;\n  response: CharactersResponseType | null;\n};\n\nconst initialState: CharacterType = {\n  loading: false,\n  error: false,\n  response: null,\n};\n\nexport const fetchCharacterByIdThunk = createAsyncThunk(\n  'fetch/characters',\n  async ({ id }: { id: number }) => {\n    try {\n      const response = await fetchCharacterById({ id });\n      return response.data;\n    } catch (error) {\n      return error;\n    }\n  }\n);\n\nconst characterSlice = createSlice({\n  name: 'characterSlice',\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [fetchCharacterByIdThunk.pending.type]: (state, action) => {\n      state.loading = true;\n      state.error = action;\n    },\n    [fetchCharacterByIdThunk.rejected.type]: (state, action) => {\n      state.loading = false;\n      state.error = action;\n    },\n    [fetchCharacterByIdThunk.fulfilled.type]: (state, action) => {\n      state.loading = false;\n      state.response = action.payload;\n    },\n  },\n});\n\nexport const characterSelector = (state: any) => state.character;\nexport default characterSlice.reducer;\n","import './style.css';\n\ninterface Props {\n  img: string;\n  name: string;\n  nickname: string;\n  birthday: string;\n  portrayed: string;\n  category: string;\n}\n\nconst CharacterDetails = ({\n  img,\n  name,\n  nickname,\n  birthday,\n  portrayed,\n  category,\n}: Props) => (\n  <div>\n    <div className=\"content-container\">\n      <img src={img} height={400} alt={name} />\n    </div>\n    <div className=\"content-container\">\n      <p>\n        Name: <strong>{name}</strong>\n      </p>\n      <p>\n        Nickname: <strong>{nickname}</strong>\n      </p>\n      <p>\n        Birthday: <strong>{birthday}</strong>\n      </p>\n      <p>\n        Portrayed by: <strong>{portrayed}</strong>\n      </p>\n      <p>\n        Category: <strong>{category}</strong>\n      </p>\n    </div>\n  </div>\n);\n\nexport default CharacterDetails;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport {\n  fetchCharacterByIdThunk,\n  characterSelector,\n} from '../store/slices/character';\nimport Loader from '../components/Loader';\nimport CharacterDetails from '../components/CharacterDetails';\nimport '../css/details.css';\n\nconst Details = ({ match }) => {\n  const id = match.params.slug;\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (id) {\n      dispatch(fetchCharacterByIdThunk({ id }));\n    }\n  }, [dispatch, id]);\n\n  const { response, loading } = useSelector(characterSelector);\n\n  const backButtonHandler = () => {\n    history.replace('/');\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <div style={{ flex: 1 }}>\n      <button type=\"button\" onClick={backButtonHandler}>\n        Back\n      </button>\n      <div className=\"content\">\n        {response?.map(\n          ({ char_id, img, name, nickname, birthday, portrayed, category }) => (\n            <CharacterDetails\n              key={char_id}\n              img={img}\n              name={name}\n              nickname={nickname}\n              birthday={birthday}\n              portrayed={portrayed}\n              category={category}\n            />\n          )\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Details;\n","import './style.css';\n\nconst Header = () => (\n  <header className=\"header\">\n    <h1 className=\"header-title\">Breaking Bad Characters</h1>\n  </header>\n);\n\nexport default Header;\n","import { Route, Switch } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Details from './pages/Details';\nimport Header from './components/Header';\nimport './css/app.css';\n\nconst App = () => (\n  <div>\n    <Header />\n    <div className=\"content\">\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/details/:slug\" component={Details} />\n      </Switch>\n    </div>\n  </div>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { configureStore } from '@reduxjs/toolkit';\nimport charactersReducer from './slices/characters';\nimport characterReducer from './slices/character';\n\nexport const rootReducer = combineReducers({\n  characters: charactersReducer,\n  character: characterReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport { store };\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\nimport './css/global.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ReduxProvider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </ReduxProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}